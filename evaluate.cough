'use strict'

{ throwEnvironmentError } = require './error-management'

{
  call
  createMalHash
  createMalList
  createMalVector
  getSeqConstructor
  malAtom?
  malDerefSeq?
  malHash?
  malFalse?
  malKeyword?
  malList?
  malMacro?
  malNil?
  malNumber?
  malQuasiquoteSeq? 
  malQuoteSeq?
  malSeq?
  malSpliceUnquoteSeq?
  malString?
  malFunction?
  malSymbol?
  malTrue?
  malUnquoteSeq?
  malVector?
  unassociateKeysAndValues
} = require './mal-types'

map = \transform \jsArray ->
 jsArray.map transform

evalHashmap = (symbols, hashmap) ->
  hashmap.bind \jsObject ->
    createMalHash (map (evaluate symbols) (unassociateKeysAndValues jsObject)) 

_evalList = (symbols, list) ->
  list.bind \jsArray ->
    createMalList (jsArray.map (evaluate symbols))

evalList = (symbols, list) ->
  call (_evalList (symbols, list))

evalQuoteSeq = \quoteSeq ->
  quoteSeq.bind \jsArray -> jsArray[1]

# WET; cf. `_evalList`
evalVector = (symbols, vector) ->
  vector.bind \jsArray -> createMalVector (jsArray.map (evaluate symbols))

evalSymbol = (symbols, symbol) ->
  # Should return a malValue.
  symbols[symbol.value] ?? throwEnvironmentError ()

_evaluate = (symbols, value) ->
  switch
    when malSymbol? value           then evalSymbol (symbols, value)
    when malList? value             then evalList (symbols, value)
    when malVector? value           then evalVector (symbols, value)
    when malHash? value             then evalHashmap (symbols, value)
    when malDerefSeq? value         then value
    when malQuasiquoteSeq? value    then value
    when malQuoteSeq? value         then evalQuoteSeq value
    when malSpliceUnquoteSeq? value then value
    when malUnquoteSeq? value       then value
    else                                 value

evaluate = \symbols \value ->
  _evaluate (symbols, value)

module.exports = evaluate
