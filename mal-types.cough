'use strict'

{ getJsId, jsArray? } = require './js-types'

accessHashCache = \malValueId ->
  malValue = HASH-CACHE[malValueId]
  malValue ?? throw new "No malValue has been cached for the key #{malValueId}"

associateKeysAndValues = \jsArray-of-malValues ->
  jsObject = {}
  for index in [0 ... jsArray-of-malValues.length] by 2
    malValue-as-key = jsArray-of-malValues[index]
    id = malValue-as-key.id
    HASH-CACHE[id] = malValue-as-key
    jsObject[id] = jsArray-of-malValues[index + 1]
  jsObject

_call = (malFn, malValues...) ->
  malFn.bind \jsFn ->
    jsFn ((extractJsValues malValues)...)

_callWithFullAccess = (malFn, malValues...) ->
  malFn.bind \jsFn -> jsFn malValues...

convertMalBoolean = \jsValue ->
  if jsValue then TRUE else FALSE

createFactory = \malType \jsValue ->
  createMalValue (jsValue, malType)

createMalHash = \jsArray ->
  _createMalHash (associateKeysAndValues jsArray)

# TODO: Make IDs lazy and cacheable, since IDs are probably
# mainly used only for keys in associative hashes and for console tracing.
createMalValue = (jsValue, malType) ->
  id = _getMalId (jsValue, malType)
  bind = \fn ->
    fn (jsValue, malType)
  { bind, id, type: malType, value: jsValue }

createTypeUtilities = \type ->
  factory = createFactory type
  predicate = \object ->
    object.type == type
  [factory, predicate]

exposeProperties = \malValue ->
  createMalHash [
    createMalKeyword 'id'
    createMalString(malValue.id)
    createMalKeyword 'type'
    createMalString(malValue.type)
    createMalKeyword 'value'
    malValue # The javascript value itself is accessibly by way of `bind`.
  ]

extractJsValues = \malValues ->
  malValues.map \malValue -> malValue.value

_getMalId = (jsValue, malType) ->
  "#{sigilize malType}<#{getJsId jsValue}>"

getMalId = \malValue ->
  _getMalId (malValue.value, malValue.type)

getSeqConstructor = \seqType ->
  SEQ-CONSTRUCTORS[seqType]

identity = \obj ->
  obj

malSeq? = \value ->
  malList? value || malVector? value

reduceMalListWith = \splatAndReduce \malList ->
  malList.bind \jsArray -> splatAndReduce jsArray...

sigilize = \malType ->
  MAL-TYPE-SIGILS[malType]

unassociateKeysAndValues = \jsObject ->
  jsArray = []
  for own key, value of jsObject
    jsArray.push ((accessHashCache key), value)
    delete HASH-CACHE[key]
  jsArray

MAL-TYPES = [
  MAL-ATOM-TYPE     = 'atom'
  MAL-FALSE-TYPE    = 'false'
  MAL-FUNCTION-TYPE = 'function'
  MAL-HASH-TYPE     = 'hash'
  MAL-KEYWORD-TYPE  = 'keyword'
  MAL-LIST-TYPE     = 'list'
  MAL-MACRO-TYPE    = 'macro'
  MAL-NIL-TYPE      = 'nil'
  MAL-NUMBER-TYPE   = 'number'
  MAL-STRING-TYPE   = 'string'
  MAL-SYMBOL-TYPE   = 'symbol'
  MAL-TRUE-TYPE     = 'true'
  MAL-VECTOR-TYPE   = 'vector'
]

MAL-TYPE-SIGILS =
  'atom'     : '@'
  'false'    : '-'
  'function' : 'λ'
  'hash'     : '{'
  'keyword'  : ':'
  'list'     : '('
  'macro'    : 'μ'
  'nil'      : '_'
  'number'   : '#'
  'string'   : '"'
  'symbol'   : '*'
  'true'     : '+'
  'vector'   : '['

[
  [createMalAtom,     malAtom?    ]
  [createMalFalse,    malFalse?   ]
  [createMalFunction, malFunction?]
  [_createMalHash,    malHash?    ]
  [createMalKeyword,  malKeyword? ]
  [createMalList,     malList?    ]
  [createMalMacro,    malMacro?   ]
  [createMalNil,      malNil?     ]
  [createMalNumber,   malNumber?  ]
  [createMalString,   malString?  ]
  [createMalSymbol,   malSymbol?  ]
  [createMalTrue,     malTrue?    ]
  [createMalVector,   malVector?  ]
] = MAL-TYPES.map createTypeUtilities

SEQ-CONSTRUCTORS =
  'hash'   : createMalHash
  'list'   : createMalList
  'vector' : createMalVector

FALSE = createMalFalse false
NIL   = createMalNil null
TRUE  = createMalTrue true

# Probable source of memory leaks:
HASH-CACHE = {}

[call, callWithFullAccess] =
  [_call, _callWithFullAccess].map reduceMalListWith

module.exports = {
  accessHashCache
  call
  callWithFullAccess
  convertMalBoolean
  createMalAtom
  createMalFunction
  createMalHash
  createMalKeyword
  createMalList
  createMalMacro
  createMalNumber
  createMalString
  createMalSymbol
  createMalVector
  exposeProperties
  FALSE
  getMalId
  getSeqConstructor
  malAtom?
  malFalse?
  malFunction?
  malHash?
  malKeyword?
  malList?
  malMacro?
  malNil?
  malNumber?
  malSeq?
  malString?
  malSymbol?
  malTrue?
  malVector?
  NIL
  TRUE
  unassociateKeysAndValues
}
