'use strict'

jsArray? = require './isJsArray'

associateKeysAndValues = \jsArray ->
  result = {}
  for i in [0 ... jsArray.length] by 2
    # `jsArray[i]` must be either a MAL string or MAL number.
    result[jsArray[i].value] = jsArray[i + 1]
  result

call = (malFn, malValues...) ->
  malFn.bind \jsFn ->
    jsFn ((extractJsValues malValues)...)

convertMalBoolean = \jsValue ->
  if jsValue then TRUE else FALSE

createFactory = \malType \jsValue ->
  createMalValue (jsValue, malType)

createMalHash = \jsArray ->
  _createMalHash (associateKeysAndValues jsArray)

createMalValue = (jsValue, malType) ->
  bind = \fn ->
    fn (jstValue, malType)
  { bind, type: malType, value: jsValue }

createTypeUtilities = \type ->
  factory = createFactory type
  predicate = \object ->
    object.type == type
  [factory, predicate]

extractJsValues = (malValues...) ->
  malValues.map \malValue -> malValue.value

identity = \obj ->
  obj

malSeq? = \value ->
  malList? value || malVector? value

MAL-TYPES = [
  MAL-ATOM-TYPE     = 'atom'
  MAL-HASH-TYPE     = 'hash'
  MAL-FALSE-TYPE    = 'false'
  MAL-FUNCTION-TYPE = 'function'
  MAL-KEYWORD-TYPE  = 'keyword'
  MAL-LIST-TYPE     = 'list'
  MAL-MACRO-TYPE    = 'macro'
  MAL-NIL-TYPE      = 'nil'
  MAL-NUMBER-TYPE   = 'number'
  MAL-STRING-TYPE   = 'string'
  MAL-SYMBOL-TYPE   = 'symbol'
  MAL-TRUE-TYPE     = 'true'
  MAL-VECTOR-TYPE   = 'vector'
]

[
  [createMalAtom,     malAtom?    ]
  [_createMalHash,    malHash?    ]
  [createMalFalse,    malFalse?   ]
  [createMalFunction, malFunction?]
  [createMalKeyword,  malKeyword? ]
  [createMalList,     malList?    ]
  [createMalMacro,    malMacro?   ]
  [createMalNil,      malNil?     ]
  [createMalNumber,   malNumber?  ]
  [createMalString,   malString?  ]
  [createMalSymbol,   malSymbol?  ]
  [createMalTrue,     malTrue?    ]
  [createMalVector,   malVector?  ]
] = MAL-TYPES.map createTypeUtilities

FALSE = createMalFalse false
NIL   = createMalNil null
TRUE  = createMalTrue true

module.exports = {
  call
  convertMalBoolean
  createMalAtom
  createMalHash
  createMalFunction
  createMalKeyword
  createMalList
  createMalMacro
  createMalNumber
  createMalString
  createMalSymbol
  createMalVector
  FALSE
  malAtom?
  malHash?
  malFalse?
  malFunction?
  malKeyword?
  malList?
  malMacro?
  malNil?
  malNumber?
  malSeq?
  malString?
  malSymbol?
  malTrue?
  malVector?
  NIL
  TRUE
}
