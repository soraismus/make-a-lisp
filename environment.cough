'use strict'

{
  createMalList
  createMalNumber
  createMalString
  createMalFunction
  createMalVector
} = require './mal-types'

extend = (jsObjects...) ->
  result = {}
  for jsObject in jsObjects
    for own key, value of jsObject
      result[key] = value
  result

extractJsValues = \malValues ->
  malValues.map \malValue -> malValue.value

convertToMalFunction = \jsFn ->
  createMalFunction ((values...) ->
    jsFn ((extractJsValues values)...))

mapJsObject = (transform, jsObject) ->
  result = {}
  for own key, value of jsObject
    result[key] = transform value
  result

jsFunctionsOnJsValues =
  '+'      : (nbrs...)   -> createMalNumber (nbrs.reduce((sum, nbr) -> sum += nbr))
  '-'      : (nbrs...)   -> createMalNumber (nbrs.reduce((sum, nbr) -> sum -= nbr))
  '*'      : (nbrs...)   -> createMalNumber (nbrs.reduce((sum, nbr) -> sum *= nbr))
  '/'      : (nbrs...)   -> createMalNumber (nbrs.reduce((sum, nbr) -> sum /= nbr))
  'concat' : (arrays...) -> createMalVector ([].concat arrays...)

jsFunctionsOnMalValues =
  'get-type' : \malValue -> createMalString (malValue.type)

malFunctions = extend (
  mapJsObject (convertToMalFunction, jsFunctionsOnJsValues)
  mapJsObject (createMalFunction, jsFunctionsOnMalValues))

environment = malFunctions

module.exports = environment
